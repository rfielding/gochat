<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <model>gpt-3.5-turbo</model>
    <site_title>Chat Forms</site_title>
    <base_url>http://localhost:8080</base_url>
    
    <templates>
        <template name="home_page">
            <![CDATA[
                <!DOCTYPE html>
                <html>
                <head>
                    <title>{{.SiteTitle}}</title>
                    <style>
                        body { font-family: Arial; max-width: 800px; margin: 0 auto; padding: 20px; }
                        .qr-code { margin: 20px 0; text-align: center; }
                        .qr-code a { display: block; margin: 10px 0; }
                    </style>
                </head>
                <body>
                    <h1>{{.SiteTitle}}</h1>
                    <div class="qr-code">
                        <h2>Registration Form</h2>
                        <img src="/qr/registration" alt="Registration QR Code">
                        <a href="/form/registration">Click here to open registration form</a>
                    </div>
                </body>
                </html>
            ]]>
        </template>

        <template name="chat_form">
            <![CDATA[
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Chat Form</title>
                    <style>
                        body { font-family: Arial; max-width: 800px; margin: 0 auto; padding: 20px; }
                        #chat-container { height: 400px; border: 1px solid #ccc; margin: 20px 0; padding: 10px; overflow-y: auto; }
                        #form-display { border: 1px solid #eee; padding: 10px; margin: 20px 0; }
                        #user-input { width: 80%; padding: 10px; }
                        button { padding: 10px 20px; background: #007bff; color: white; border: none; cursor: pointer; }
                    </style>
                </head>
                <body>
                    <div id="form-display">
                        <div data-field="FullName">Full Name: </div>
                        <div data-field="DateOfBirth">Date of Birth: </div>
                        <div data-field="License">License Number: </div>
                        <div data-field="Contact">Contact Information: </div>
                    </div>
                    <div id="chat-container"></div>
                    <div>
                        <input type="text" id="user-input" placeholder="Type your response...">
                        <button onclick="sendMessage()">Send</button>
                    </div>
                    <script>
                        function appendMessage(data, isUser) {
                            if (!isUser) {
                                console.log("Received data:", data);
                                
                                // Handle form updates
                                if (data.updates) {
                                    for (const [field, value] of Object.entries(data.updates)) {
                                        const elem = document.querySelector(`[data-field="${field}"]`);
                                        if (elem) {
                                            elem.textContent = `${field}: ${value}`;
                                        }
                                    }
                                }

                                // Show the message
                                if (data.message) {
                                    const div = document.createElement('div');
                                    div.style.margin = '10px 0';
                                    div.style.padding = '10px';
                                    div.style.backgroundColor = '#f0f0f0';
                                    div.style.color = 'black';
                                    div.textContent = data.message;
                                    document.getElementById('chat-container').appendChild(div);
                                    div.scrollIntoView();
                                }

                                if (data.complete && data.nextUrl) {
                                    setTimeout(() => {
                                        window.location.href = data.nextUrl;
                                    }, 2000);
                                }
                            } else {
                                const div = document.createElement('div');
                                div.style.margin = '10px 0';
                                div.style.padding = '10px';
                                div.style.backgroundColor = '#007bff';
                                div.style.color = 'white';
                                div.textContent = data;
                                document.getElementById('chat-container').appendChild(div);
                                div.scrollIntoView();
                            }
                        }

                        function sendMessage() {
                            const input = document.getElementById('user-input');
                            const message = input.value.trim();
                            if (message) {
                                appendMessage(message, true);
                                fetch(window.location.pathname + '/chat', {
                                    method: 'POST',
                                    headers: {'Content-Type': 'application/json'},
                                    body: JSON.stringify({message: message})
                                })
                                .then(response => response.json())
                                .then(data => {
                                    appendMessage(data, false);
                                    input.value = '';
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    appendMessage({message: 'Sorry, there was an error processing your message.'}, false);
                                });
                            }
                        }

                        document.getElementById('user-input').addEventListener('keypress', function(e) {
                            if (e.key === 'Enter') {
                                sendMessage();
                            }
                        });

                        // Immediately start the chat when the script loads
                        fetch(window.location.pathname + '/chat', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({message: 'start'})
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log("Initial chat response:", data);
                            appendMessage(data, false);
                        })
                        .catch(error => {
                            console.error('Error starting chat:', error);
                            appendMessage({message: 'Sorry, there was an error starting the chat.'}, false);
                        });
                    </script>
                </body>
                </html>
            ]]>
        </template>
    </templates>

    <forms>
        <form name="registration">
            <config>
                {
                    "path": "/register",
                    "title": "Registration Form",
                    "description": "Please complete your registration",
                    "button_text": "Send",
                    "primary_key": ["License"]
                }
            </config>
            <form_fields>
                Full Name: {{.FullName}} (like first, middle, last name)
                Date of Birth: {{.DateOfBirth}} (like 1970-01-01)
                License Number: {{.License}} (like 444-55-6666)
                Contact Information: {{.Contact}} (like phone number, email, address)
            </form_fields>
            <system_prompt>
                You are working at the front desk of a clinic.
                Patients arrive, and your job is to interrogate the user to get necessary forms filled out.
                The fields in the form are described like this:

                ```Form Fields
                %s
                ```

                For example, if you want to talk to the user, the only way you can do that
                is to use the SAY command. The json being sent to you will have a `content` json field.
                These fields are literal strings that must be in this well-defined format.

                ```Assistant response content example 1
                SAY Good morning. We need to get you registered in our system.
                SAY What is your full name?
                ```

                When we get this message, we are looking for commands.
                Commands are the first word on a line. We recognize these commands:

                SAY value
                SET fieldName value
                SAVE
                
                Every line that starts with "SAY" will give a separate chat message to the user.
                Every line that starts with "SET" will expect the first word to be a fieldName from form fields.
                Every line that starts with "SAVE" will write the current form fields to disk.

                It is important that the field name for SET matches an actual form value.
                For example, this response from you:

                ```Assistant response content example 2
                SET FullName John Doe
                ```

                Expects that in form fields, there is a variable like {{.FullName}}. You must use field names that match what exists in the template.
                This will set the FullName field to "John Doe".
                But the reason that this application exists is to handle the language task really well.

                If the user responds to you in Spanish, then you should respond to the user in Spanish as well
                Whatever language the last user response was in, you should respond in that language.
                This is because users often switch languages in the middle of a conversation, to handle technical jargon.
                Respond in English by default.

                The other thing is that users will often respond with something that you did not ask for.
                If you ask "What is your drivers license number?", and the user responds
                in Spanish with something that means "My name is Edward Jones", then you should
                respond by setting a value with a command like: "SET FullName Edward Jones".

                If there are suggested formats for the data to be in, then you should do the format translation for the user.
                For example, if you ask: "SAY What is your birth date?", and the user says "May 2, 1970", but the form fields
                suggested a format like: "YYYY-MM-DD", then you can respond with "SET BirthDate 1970-05-02".
                If a form has a lot of fields, you may need to pick apart the response to set
                individual fields. For example, if you ask "SAY What is your full name?", but the form
                has fields like FirstName and LastName, then you would do this, given 
                that form fields has {{.FirstName}} and {{.LastName}} in it.

                SET FirstName Robert
                SET LastName Fielding

                Your job is to make filling out forms less tedious for the user.
                Handle the formatting, language translation, and picking apart and combining fields for the user.

                As an example, if the form has InsuranceProvider and InsuranceGroupId, the user
                might not answer the question you asked; but instead say something like

                "My group number is 43214312 for Aetna"

                When you have asked about values for every field in the form,
                you should command that the field be saved, and say something to the user about it.

                ```Assistant response
                SET RegistrationDate 2024-11-30
                SAVE
                SAY Thank you. You are now registered in our database.
                ```

                It is critical that you never make responses that do not
                start with a command on every line. If you put in extra text before
                the command, then the app on our end is not smart enough to figure out what to do with it.
                Here is an example that breaks our application:

                ```Assistant response example
                What is your name?
                ```

                Our application does not know what to do with this line,
                because every line should be a command such as SAY, SET, or SAVE.
                Here are examples of acceptable lines, given that form fields match what exists in the template:

                ```Assistant response example lines
                SAY What is your name?
                SAY What is your birth date?
                SET BirthDate 1970-05-02
                SAY Doctor Hussein is on vacation today.
                SAY What is your address?
                SET AddressLine1 123 Main Street
                SET AddressCity Woodbridge
                SET AddressState VA
                SAY What is your phone number?
                SAVE
                SET Diagnosis Ms Jones had a heart attack last night.
                ```

                You should initiate the conversation by asking for the first field in the form.
                If you do a SET or a SAVE command, you need to SAY what you want from the user next,
                so that the user knows how to respond.

                Before asking for any field, check if it's already filled in the form data.
                The current form data is sent to you in the chat history.
                If a field already has a value, move on to the next empty field.
                
                When all fields are filled, use the SAVE command and thank the user.
            </system_prompt>
        </form>
    </forms>
</configuration> 